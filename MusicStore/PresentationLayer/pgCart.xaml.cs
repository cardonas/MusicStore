using System;
using System.Collections.Generic;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DataObjects;
using LogicLayer;

namespace PresentationLayer
{
    /// <summary>
    /// Interaction logic for Cart.xaml
    /// </summary>
    public partial class PgCart
    {
        private decimal _subTotal;
        private readonly ICustomerManager _customerManager;
        private readonly ICartManager _cartManager;
        private readonly IInvoiceManager _invoiceManager;
        private readonly List<InstrumentVm> _cartItems;
        private readonly IInvoiceLineManager _invoiceLIneManager;
        private readonly Employee _user;
        private Customer _customer;


        public PgCart(Employee user)
        {
            InitializeComponent();
             _cartManager = new CartManager();
            _invoiceManager = new InvoiceManager();
            _customerManager = new CustomerManager();
            _invoiceLIneManager = new InvoiceLineManager();
            _cartItems = _cartManager.GetAllInCart();
            _user = user;
        }

        private void dgCart_Loaded(object sender, RoutedEventArgs e)
        {
            DgCart.ItemsSource = _cartItems;
        }

        private void DgCart_AutoGeneratedColumns(object sender, System.EventArgs e)
        {
            DgCart.Columns.RemoveAt(1);
            DgCart.Columns.RemoveAt(2);
            DgCart.Columns.RemoveAt(2);
            DgCart.Columns.RemoveAt(6);
            DgCart.Columns[0].Header = "Rental Term";
            DgCart.Columns[1].Header = "Rental Fee";
            DgCart.Columns[2].Header = "ID";
            DgCart.Columns[3].Header = "Type";
            DgCart.Columns[4].Header = "Status";
            DgCart.Columns[5].Header = "Brand";
            DgCart.Columns[6].Header = "Price";
            DgCart.Columns[0].Width = 100;
            DgCart.Columns[1].Width = 95;
            DgCart.Columns[2].Width = 80;
            DgCart.Columns[3].Width = 100;
            DgCart.Columns[4].Width = 100;
            DgCart.Columns[5].Width = 80;
            DgCart.Columns[6].Width = 100;
        }

        private void GetTaxAndTotal()
        {
            decimal tax = _subTotal *  0.07M;
            decimal total = _subTotal + tax;
            TxtTax.Text = tax.ToString("c");
            TxtTotal.Text = total.ToString("c");
        }

        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            foreach (var instrumentVm in _cartItems)
            {
                if (instrumentVm.InstrumentStatusId == "For Rent" ||
                    instrumentVm.InstrumentStatusId == "For Rent To Own")
                {
                    _subTotal += instrumentVm.RentalFee;
                }
                _subTotal += instrumentVm.Price;
            }
            GetTaxAndTotal();
            TxtEmployee.Text = _user.FirstName;
            TxtCustomer.Focus();
        }

        private void TxtCustomer_KeyUp(object sender, KeyEventArgs e)
        {
            bool hasResults = false;
            string query = (sender as TextBox)?.Text;

            if (query != null && query.Length == 0)
            {
                    AutoComplete.Visibility = Visibility.Collapsed;
            }
            else
            {
                    AutoComplete.Visibility = Visibility.Visible;
            }

            AutoComplete.Visibility = Visibility;
            AutoComplete.ItemsSource = _customerManager.GetCustomersByEmailLike(query);

            if (!hasResults)
            {
                AutoComplete.ItemStringFormat = "No Customers Found.";
            }
        }

        private void AutoComplete_AutoGeneratedColumns(object sender, System.EventArgs e)
        {
            AutoComplete.HeadersVisibility = DataGridHeadersVisibility.None;
            AutoComplete.Columns.RemoveAt(3);
            AutoComplete.Columns.RemoveAt(0);
            AutoComplete.Columns.RemoveAt(2);
            AutoComplete.SelectedIndex = 0;
        }

        private void AutoComplete_MouseLeave(object sender, MouseEventArgs e)
        {
            AutoComplete.Visibility = Visibility.Collapsed;
        }

        private void AutoComplete_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            _customer = (Customer)AutoComplete.SelectedItem;
            TxtCustomer.Text = _customer.LastName + ", " + _customer.FirstName;
            AutoComplete.Visibility = Visibility.Collapsed;
        }

        private void BtnAddCustomer_Click(object sender, RoutedEventArgs e)
        {
            this.NavigationService?.Navigate(new pgCustomerDetails(true));
        }

        private void BtnCheckout_Click(object sender, RoutedEventArgs e)
        {
            int invoiceId = createInvoice();

            createInvoiceLines(invoiceId);

            if(emptyCart())
            {
                MessageBox.Show("Customer Checked out successfully.");
            }
            refreshList();
            TxtCustomer.Text = "";
            TxtTax.Text = 0.ToString("c");
            TxtTotal.Text = 0.ToString("c");
        }

        private int createInvoice()
        {
            int invoiceID = 0;
            try
            {
               invoiceID = _invoiceManager.CreateInvoice(_customer.CustomerId, _user.EmployeeId, DateTime.Now,
                    decimal.Parse(TxtTotal.Text, NumberStyles.Currency));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\n\n" + ex.InnerException?.Message);
            }

            return invoiceID;
        }

        private void createInvoiceLines(int invoiceId)
        {
            foreach (var cartItem in _cartItems)
            {
                try
                {
                    decimal lineTotal = 0;
                    lineTotal += cartItem.Price;
                    if (cartItem.InstrumentStatusId == "For Rent" || cartItem.InstrumentStatusId == "For Rent To Own")
                    {
                        lineTotal += cartItem.RentalFee;
                    }

                    _invoiceLIneManager.AddInvoiceLine(new InvoiceLine()
                    {
                        InstrumentID = cartItem.InstrumentId,
                        InvoiceID = invoiceId,
                        RepairTicketID = null,
                        RentToOwnID = null,
                        LineTotal = lineTotal
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + "\n\n" + ex.InnerException?.Message);
                }
            }
        }

        private bool emptyCart()
        {
            bool isEmpty = false;

            foreach (var cartItem in _cartItems)
            {
                try
                {
                    isEmpty = _cartManager.DeleteCartItem(cartItem.InstrumentId);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + "\n\n" + ex.InnerException?.Message);
                }
            }

            return isEmpty;
        }

        private void refreshList()
        {
            DgCart.ItemsSource = _cartManager.GetAllInCart();
        }
    }
}

